import unittest

def knapsack(n, W, values, weights):
    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]
    for i in range(1, n + 1):
        for w in range(W + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
            else:
                dp[i][w] = dp[i - 1][w]
    res = []
    w = W
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:
            res.append(i - 1)
            w -= weights[i - 1]
    res.reverse()
    return res, dp[n][W]
class TestKnapsack(unittest.TestCase):
    def test_knapsack(self):
        n = 4
        W = 7
        values = [1, 4, 5, 7]
        weights = [1, 3, 4, 5]

        expected_items = [1, 3]
        expected_value = 9

        items, max_value = knapsack(n, W, values, weights)

        self.assertEqual(items, expected_items)
        self.assertEqual(max_value, expected_value)

if __name__ == '__main__':
    unittest.main(argv=[''], exit=False)
